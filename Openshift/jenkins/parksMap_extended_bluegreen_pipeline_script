#!groovy
// Note due to resource constraints on the shared na37.openshift.opentlc.com environment this is an exended pipeline for the parksMap_pipeline
// i.e. everything on the parksMap_pipeline must have passed prior to running this pipeline. The dev tag version needs to be added.

// Run this pipeline on the custom Maven Slave ('maven-custom-slavepod')
// 'maven-appdev' has skopeo installed as well.
node('maven-custom-slavepod') {
    // Checkout Source Code
    stage('Checkout ParksMap Source(Gogs)') {
      git credentialsId: '2b8f9c29-982e-46bb-9e15-80ab107ef284', url: 'http://gogs-jmk.apps.na37.openshift.opentlc.com/poc/ParksMap.git'
      sh "ls -al"
    }
    
    def version = getVersionFromPom("./parksmap/pom.xml")

    // Set the tag for the development image: version + build number
    def devTag  = "${version}-2"
    // Set the tag for the production image: version
    def prodTag = "${version}"

    // Blue/Green Deployment into Production
    // -------------------------------------
    def destApp   = ""
    def activeApp = ""

    stage('Tag ParksMap Dev Image with production tag') {
      // Tag the built image with the production tag.
      openshiftTag alias: 'false', destStream: 'parksmap', destTag: prodTag, destinationNamespace: 'mitzicom-tasks-dev', namespace: 'mitzicom-tasks-dev', srcStream: 'parksmap', srcTag: devTag, verbose: 'false'
    }

    stage('Blue/Green Production Deployment') {
      activeApp = "parksmap-blue"
      destApp = "parksmap-blue"

      echo "Active Application:      " + activeApp
      echo "Destination Application: " + destApp

      // Update the Image on the Production Deployment Config for the Blue App
      sh "oc set image dc/${destApp} ${destApp}=docker-registry.default.svc:5000/mitzicom-tasks-dev/parksmap:${prodTag} -n mitzicom-tasks-prod"

      // Deploy the Blue application.
      openshiftDeploy depCfg: destApp, namespace: 'mitzicom-tasks-prod', verbose: 'false', waitTime: '', waitUnit: 'sec'
      openshiftVerifyDeployment depCfg: destApp, namespace: 'mitzicom-tasks-prod', replicaCount: '1', verbose: 'false', verifyReplicaCount: 'true', waitTime: '', waitUnit: 'sec'
      openshiftVerifyService namespace: 'mitzicom-tasks-prod', svcName: destApp, verbose: 'false'
    }

    stage('Switch over to new Green Version') {
      input "Switch Production to Green application?"
      destApp = "parksmap-green"

      // Update the Image on the Production Deployment Config for the green App
      sh "oc set image dc/${destApp} ${destApp}=docker-registry.default.svc:5000/mitzicom-tasks-dev/parksmap:${prodTag} -n mitzicom-tasks-prod"

      // Deploy the Green application.
      openshiftDeploy depCfg: destApp, namespace: 'mitzicom-tasks-prod', verbose: 'false', waitTime: '', waitUnit: 'sec'
      openshiftVerifyDeployment depCfg: destApp, namespace: 'mitzicom-tasks-prod', replicaCount: '1', verbose: 'false', verifyReplicaCount: 'true', waitTime: '', waitUnit: 'sec'
      openshiftVerifyService namespace: 'mitzicom-tasks-prod', svcName: destApp, verbose: 'false'

      echo "Switching Production application to ${destApp}."
      sh 'oc patch route parksmap-blue -n mitzicom-tasks-prod -p \'{"spec":{"to":{"name":"' + destApp + '"}}}\''
    }

}

// Convenience Functions to read variables from the pom.xml
// Do not change anything below this line.
// --------------------------------------------------------
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}